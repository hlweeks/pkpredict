\documentclass{article}
\usepackage{amsmath,underscore}
\usepackage[margin=1in]{geometry}

\newcommand{\mic}{$ft > 4 \times MIC$}

\begin{document}

<<>>=
# Other needed packages
library(xtable)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(rhandsontable)
@


% Outline:
% 1. Introduction
% 2. Methods
%  - PK model (two-compartment)
%  - PD summaries (T>MIC)
%  - Statistical model (Bayesian NLR); prior and where it comes from
%  - Approximate intervals for MIC statistic
%  - Evaluating quality of approximate intervals
%  3. Results; summary of CI quality
%  4. Examples
%  5. Discussion/conclusion; potential extensions
%  - statistical [covariates, different types of models]
%  - applications)
% Extensions
% Conclusions

%\section{Introduction}
%\begin{itemize}
%\item Goal is to facilitate real-time herapeutic drug monitoring (TDM); translational research.
%\item PK predictions often not reported with uncertainty; cite literature.
%\item Need to quantify uncertianty in real time, but it's difficult.
%\item incorporate objective prior information
%\item We created a web app and suite of methods that accomplish this.
%\end{itemize}

%[need references]
Adverse medical consequences can arise from both antibiotic underdosing and overdosing of hospitalized patients. In the former case, patients receive an insufficient amount of antibiotic to effectively combat infection. In the latter, an overabundance of antibiotic may increase the risk of toxicity. However, the pharmacokinetics and pharmacodynamics of common antibiotics, such as ciprofloxacin and piperacillin, can exhibit substantial variability among hospitalized patients due to patient characteristics (e.g., body mass) or complications (e.g., organ failure) \cite{Shotwell2015, Shotwell2016}. As a result, simple algorithmic dosing strategies (e.g., based on creatinine alone) can fail to ensure an appropriate level of antibiotic exposure.\\

For an individual patient, pharmacokinetic uncertianty can be reduced by measuring drug consentration in the blood over time. These data can be used to estimate current an past drug exposure, predict future drug exposure under alternative dosing strategies, and adjust the dose accordingly. The methods and software presented herein were designed to implement this process using prior information about pharmacokinetic heterogeneity in the target population and, if available for the individual, measurments of drug concentration in the blood over time. In order to impact clinical decision making, these tasks must be accomplished in real-time and account for (often substantial) statistical uncertainty.\\

We implement Bayesian methods using pharmacokinetic data from a prior study [cite] to provide posterior estimates of individual  target attainment, measured as the fraction of the dosing period spent above the necessary blood concentration threshold. The fact that patients tend to vary widely in their response to treatment indicates that measures of uncertainty are critical to understanding response to treatment at both the population and patient-specific level. In order for the implementation of such procedures to be truly beneficial to individuals, it is necessary to have a method of assessing and predicting patient response in real time. This introduces the issue of selecting a statistical approximation technique that is both accurate in its quantification of uncertainty while also being computationally feasible to implement via a web application. Our statistical methodology is paired with a web application that implements these techniques and makes them accessible to, for example, a physician in real time. We present assessments of the performance and computational efficiency for interval approximations.

% [MSS note: I think this need to be in the last paragraph of the introduction] The aim of this work is to facilitate accurate, real-time therapeutic drug monitoring (TDM).




\section{Methods}
\subsection{Two-compartment model}
The two-compartment pharmacokinetic model is expressed as a system of two ordinary differential equations as follows, where $m_1$ and $m_2$ are the masses of drug in the central and peripheral compartments, respectively.

\begin{align}
\frac{dm_1}{dt} &= -k_{10}m_1 - k_{12}m_1 + k_{21}m_2 + k_R \nonumber \\
\frac{dm_2}{dt} &= \phantom{-k_{10}m_1} + k_{12}m_1 - k_{21}m_2 \nonumber
\end{align}

The concentration of drug in the central compartment is given by $c_1 = m_1/v_1$, where $v_1$ is the volume of the central compartment. The parameters $k_{10}$, $k_{12}$, $k_{21}$, and $k_R$ are described in Table \ref{tab:pkpars}

\begin{table}
\begin{tabular}{lll} \hline
Parameter & Units & Description \\ \hline
$k_{10}$ & h$^{-1}$ & Elimination rate from central compartment\\
$k_{12}$ & h$^{-1}$ & Distribution rate from central to peripheral compartment\\
$k_{21}$ & h$^{-1}$ & Distribution rate from peripheral to central compartment\\
$k_R$  & g$\cdot$h$^{-1}$ & Infusion rate into central compartment\\
$v_1$  & L & Volume of central compartment\\
\hline
\end{tabular}
\caption{Two-compartment model parameter units (SI) and descriptions. \label{tab:pkpars}}
\end{table}

% Is "dosing window" the appropriate terminology here
% alternative: observation period
To assess patient response to treatment by measuring {\it target attainment}, defined in this context to be the fraction of dosing window for which the concentration of piperacillin in the bloodstream is 64$\mu$g/mL: four times the minimum inhibitory concentration (MIC) for piperacillin. We denote this statistic as \mic. Dosing for a patient needs to be enough that the concentration in the blood remains above the necessary threshold for suppression of the offending microorganism, yet not so high as to increase the risk of adverse side effects including toxicity. Typically, a multiple of the minimum inhibitory concentration is used for such measurements, since drug concentration is attenuated in muscle tissue relative to the bloodstream. \\

% Is it necessary to define the acronym IV?
% Insert link to next section for concentration-time curve. I mention it in this calculation but it's derived from the Bayesian model below.
We measure \mic by calculating a simple proportion of the time during the dosing window above 64$\mu$g/mL. By default, the method considers the conclusion of the dosing window to be 12 hours after the end of the final infusion. If implementing this method with other medications, the limit of the dosing window may need to be altered based on drug-specific properties such as the rate of elimination. We use a bisection root-finding method to identify the times at which the patient's concentration-time curve crosses 64$\mu$g/mL. Drug concentration increases if and only if the drug is actively being infused intravenously. Once the IV is removed, the drug concentration can only decrease. Thus, the adjacent time points at which one infusion ends and the next begins (and vice versa) are used as endpoints in the bisection process.\\


% Is this more relevant here or in the Bayesian model section?
Time 0 is taken to be the time of first drug infusion. Necessarily, this assumes that the concentration of drug in the patient's body is 0$\mu$g/mL at time 0.

% Is the 50% threshold generally a target? Or was that just for the prior study/other paper?
A specific pharmacodynamic target is usually outlined, e.g. \mic $> 0.5$.



% There are specific criteria for spending a certain amount of time above the threshold, are there accepted criteria for toxicity thresholds? (defined either by time or concentration or a combination between the two)

% introduce the time above MIC statistic and how we calculate/approximate it based on the intersection of the curve with the MIC.


\subsection{Bayes prediction model} % statistical model
% Insert label to connect to previous section where I mention the concentration time curve
Concentration measurements are modeled using a nonlinear regression method with additive error as follows:
\begin{displaymath}
c_{ij} = \eta_i(t_{ij}, \theta_i) + \epsilon_{ij}
\end{displaymath}
\noindent In this expression, $c_{ij}$ is the measured concentration for subject $i = 1 \ldots n$ at time $t_{ij}$ for $j = 1 \ldots m_i$, $\eta_i(t_{ij}, \theta_i)$ is the two-compartment model solution for subject $i$ at time $t_{ij}$ given parameters $\theta_i = [k_{10i}, k_{12i}, k_{21i}, v_{1i}]$, and $\epsilon_{ij}$ represents i.i.d. random error with mean zero. By specifying the random error density function, say $f(\epsilon_{ij}, \sigma)$, the subject-specific likelihood function is
\begin{displaymath}
L_i(\theta_i, \sigma) = \prod_{j=1}^{m_i} f(c_{ij} - \eta_i(t_{ij}, \theta_i), \sigma).
\end{displaymath}
\noindent Thus, given a prior distribution $\pi_0(\theta_i)$, the subject-specific posterior is proportional to $\pi_i(\theta_i, \sigma) \propto \pi_0(\theta_i,\sigma)L_i(\theta_i,\sigma)$.

In the current context, $f$ is taken as the normal density function with mean zero and standard deviation $\sigma$, and the prior distribution is generated to satisfy the following:
\begin{align}
[\log \theta_i] &\sim N_4(\mu_0, \Sigma_0) \\
[\log \sigma] &\sim N_1(m_0, s_0)
\end{align}
\noindent where $N_4(\mu_0, \Sigma_0)$ represents the 4-variate normal distribution with mean $\mu_0$ and covariance matrix $\Sigma_0$, and $N_1(m_0, s_0)$ represents the univariate normal distribution with mean $m_0$ and variance $s_0$. The prior distribution for the PK parameters represents our prior knowledge about the PK heterogeneity for a particular drug in a target population. Thus, the values of the prior hyperparameters should be carefully selected for the task at hand. In the current context, and by default, the hyperparameters are specified to correspond with estimates that arose from a study of piperacillin pharmacokinetics in a hospitalized, critically ill population. The particular values are listed in an appendix.

Due to the nonlinearity of the two-compartment model, the posterior distribution does not take a familiar form, and posterior summaries must be approximated. In particular, we sought to compute 95\% credible bands for subject-specific concentration-time curves, and for a specific summary of the curve: the length of time in which the concentration exceeds a specified value. Monte Carlo techniques are often used to approximate these quantities. However, because these posterior summaries are presented in a web application in real time, we sought alternatives that were less computationally intensive and deterministic.

We consider several possible types of intervals: logit-transformed, probit-transformed, and untransformed intervals. Logit- and probit-transformed intervals restrict the computed confidence interval boundaries to be between 0 and 1. Untransformed intervals can yield bounds above 1, in which case the upper confidence limit is truncated at 1.

% mention that here we are looking for the posterior of that specific statistic (ftmic)



\subsubsection{Laplace approximation}
We first considered a method that makes use of two approximations. The first is a Laplace approximation to the subject-specific posterior density, and the second is a first order Taylor approximation of the target summary (i.e., the `delta method'). The Laplace approximation is given as follows
$$\pi_i(\log \theta_i, \log \sigma) \approx N([\log \hat{\theta_i},\log \hat{\sigma}], [-H]^{-1})$$
\noindent where $[\log \hat{\theta_i},\log \hat{\sigma}]$ is the posterior mode and $H_{\hat{\theta_i}}$ is the posterior Hessian with respect to $[\log \theta_i, \log \sigma]$ evaluated at the posterior mode. The second approximation makes use of the delta method, such that a posterior functional $h(\log \theta_i)$ has an approximate normal distribution. In the present context, $h(\log \theta_i)$ represents the logit of the fraction of the dosing period in which the concentration of drug exceeds a spedified value. The first-order Taylor expansion of $h(\log \theta_i)$ is
\begin{displaymath}
h(\log \theta_i) \approx  h(\log \hat{\theta_i}) + G^T(\log \theta_i - \log \hat{\theta_i}),
\end{displaymath}
\noindent where $G$ is the gradient of $h(\log \theta_i)$ with respect to $[\log \theta_i, \log \sigma]$ evaluated at the posterior mode. Thus, given that $[\log \theta_i, \log \sigma]$ has an approximate normal distribution, the same is true for $h(\log \theta_i)$:
\begin{displaymath}
h(\log \theta_i) \sim N(h(\log \hat{\theta_i}), G^T[-H]^{-1}G).
\end{displaymath}
\noindent An approximate $(1-\alpha)\cdot 100$\% credible interval for $h(\log \theta_i)$ is thus given by the $\alpha/2$ and $(1-\alpha)/2$ quantiles of the approximate posterior distribution for $h(\log \theta)$. This method is computationally elegant, since the posterior Hessian and posterior mode can be computed simultaneously by most optimization software routines (e.g., the R function `optim'). Indeed, this method usually has the smallest computational burden (i.e., number of likelihood evaluations) among the three methods considered here.

\subsection{Evaluation of approximation method}

	We compared the performance of three different interval types: logit-transformed, probit-transformed, and untransformed (further referred to as the linear interval). We obtain 1,000 draws (``patients'') from the prior distribution of pharmacokinetic parameters. For each patient, we simulated 95\% confidence intervals for each of the three types using the Metropolis MCMC algorithm.

The posterior coverage of the MIC statistic 95\% confidence interval was estimated as follows:

One thousand samples were drawn from the prior distribution of PK parameters. For each set of prior parameters, 6 observations were simulated using the concentration predicted by the first 4 PK parameters and the standard error term corresponding to the 5th prior parameter. All observations were simulated during the final (5th) dosing period at 32, 32.5, 33, 34, 36, and 38 hours.
% Is this sampling scheme okay? Representative of general sampling scheme?

For each of the 50 sets of prior parameters and simulated data:

\begin{itemize}
	 \item A Laplace approximation to the posterior density was calculated and the delta method used to estimate the standard errors of the MIC statistic. A 95\% asymptotic normal confidence interval was used with the delta method standard errors to estimate upper and lower bounds.
	 \item 3,000 samples from the posterior distribution of PK parameters were taken using a Metropolis MCMC algorithm with 2,000 warm-up iterations. The proportion of the 3,000 posterior samples falling within the upper and lower bounds was used to estimate the proportion of the posterior distribution of the MIC statistic falling within the confidence interval.
\end{itemize}

\section{Results}

\subsection{Evaluation of approximation method}
<<>>=
load("/Users/hannahweeks/Desktop/all_cov.rdta")

# Median (IQR) for each
miqr <- purrr::partial(quantile, probs = c(.25, .5, .75), na.rm = T)

miqr_logit <- miqr(coverage_res$coverage_logit)
miqr_probit <- miqr(coverage_res$coverage_probit)
miqr_frac <- miqr(coverage_res$coverage_frac)

spf <- purrr::partial(sprintf, fmt = "%.1f")
@


%Update these numbers with 1000 simulations
{\it replace}
	On 1,000 samples we calculated a median posterior coverage of `r spf(miqr_frac[2]*100)`\% with an IQR `r spf(miqr_frac[1]*100)`\% to `r spf(miqr_frac[3]*100)`\%.
	%We calculate a Monte-Carlo standard error of approximately $\sqrt{(0.9)(0.1)/3000} = 0.005$.

Confidence intervals for the MIC statstic were also considered on the logit and probit scales in order to restrict the bounds to the interval [0,1]; however, as these transformations resulted in slightly lower and more variable posterior coverage, the original scale was used.
For the logit-transformed interval, the Bayesian coverage had a median (IQR) of `r spf(miqr_logit[2]*100)`\% (`r spf(miqr_logit[1]*100)`\%, `r spf(miqr_logit[3]*100)`\%) and the probit-transformed interval had `r spf(miqr_probit[2]*100)`\% (`r spf(miqr_probit[1]*100)`\%, `r spf(miqr_probit[3]*100)`\%)



	<<>>=

	ncov_logit$type <- "logit"
	ncov_probit$type <- "probit"
	ncov_frac$type <- "linear"

	ncov_res <- rbind(ncov_logit, ncov_probit, ncov_frac)
# make sure column names are correct and that class == data.frame

ncov_long <- reshape(ncov_res, varying = c("lower", "upper"), v.names = "ncov",
                     timevar = "side", times = c("lower", "upper"),
                     direction = "long")
rownames(ncov_long) <- NULL
ncov_long <- subset(ncov_long, select = c("ncov", "side", "type"), drop = TRUE)

cbColors <- c("#009E73", "#0072B2", "#D55E00")
@

\begin{figure}
\caption{Comparison of confidence intervals for estimate of target attainment}
<<echo = FALSE>>=
# Boxplots or violin plots?

# With lines where we would want (actual middles are closer to .05)
ggplot(ncov_long, aes(x = type, y = ncov, fill = type)) +
  facet_grid(~ side) + geom_boxplot(na.rm = TRUE) +
  scale_fill_manual(values = cbColors) +
  geom_hline(yintercept = .025, linetype = 'dashed') +
  labs(x = "Interval Type", y = "95% Confidence Interval Tail Area") + guides(fill = FALSE)
@
\footnotesize
Plotted values represent the ``non-coverage'' in each tail region outside the 95\% confidence interval.
\end{figure}

% Should comment on the ones that are equal to 1

% Other things to include in results
\begin{itemize}
\item used MCMC as gold-standard
\item quantified posterior probability contained within approximate intervals for $logit^{-1}(h(log \theta_i))$
\item quantified number of posterior evaluations % X
\item quantified computing time % give brief summary how long it takes on average to compute each interval using sampling or approx
\item note: make sure to uncomment line below and set up the bibtex doc
%\item use ``plasmode'' simulation to assess quality of method across variety of individuals (PK heterogeneity in this pop); recent example of plasmode use in \cite{Franklin2014}; pioneered by \cite{Vaughan2009} % make sure this line runs - might be an issue w/ configuring bibtex document
\end{itemize}




% \section{Package Contents}
%
% The primary function within the \texttt{pkm} package is the \texttt{pkm} function.



\section{Example}

\begin{itemize}
  \item Generate ivt data frame
  \item obtain raw mic estimate
  \item fit pkm model
  \item plot estimates
  \item update the model and re-plot estimates
  \item shiny app demo
\end{itemize}

<<message = FALSE>>=
# devtools::install_github("hlweeks/pkpredict")
library(pkpredict)
@

{\large note: for key functions, list the parameters that can be manipulated and what they do, default values, etc}

\subsection{Sample infusion schedule and concentation data}
package functions: \texttt{ivt\_toList}

We have a vector of start times for five doses in hours since first infusion, and the duration of each dose. In this case, the duration is the same for each dose: half an hour. The rate of infusion is 6 g/h for all administered doses.
<<>>=
# Time in hours since first infusion
start_times <- c(0, 8, 16, 24, 32)
# Duration of each infusion in hours
duration <- 0.5
# Rate in g/h
rate_of_infusion <- rep(6, 5)

ivt_d <- ivt_toList(begin = start_times, dur = duration, rate = rate_of_infusion)
@

<<echo = FALSE, results = 'asis'>>=
inf_df <- data.frame("Begin (h)" = start_times,
                     "End (h)" = start_times + duration,
                     "Infusion Rate (g/h)" = rate_of_infusion,
                     check.names = FALSE)

print(xtable(inf_df, digits = 1, caption = "Sample Infusion Schedule"),
      caption.placement = "top", include.rownames = FALSE)
@

We also have sample data from three blood draws, with information on the concentration of piperacillin in the blood in $\mu$g/mL at the time at which the blood was drawn, again in hours since first infusion.
<<>>=
# Time is in hours since first infusion
# Concentration is in mcg/ml (or equivalently, mg/L)
dat_d <- data.frame("time" = c(1, 4, 40),
                    "con" = c(82.7, 80.4, 60),
                    check.names = FALSE)
@

<<echo = FALSE, results = 'asis'>>=
names(dat_d) <- c("Time (h)", "Concentration (mcg/mL)")
print(xtable(dat_d, digits = 1, caption = "Sample Data (observed from blood draws)"),
      caption.placement = "top", include.rownames = FALSE)
names(dat_d) <- c("time", "con")
@


\subsection{MIC estimates}
package functions: \texttt{mic_stat}


We first obtain a prior estimate of target attainment ({\bf make sure this is defined above}) based on the infusion schedule outlined above. By default, the \texttt{mic\_stat} function calculates the $fT > 4 \times MIC$ (notation from paper Matt sent - make sure this notation is introduced above).
<<>>=
# Threshold is in mcg/mL (same scale as observed data)
# By default, considering time through 12 hours after end of the final dose

# Prior estimate
prior_ft.mic <- mic_stat(ivt = ivt_d, th = 64)
prior_ft.mic
@

This prior estimate of target attainment represents how we would expect a typical patient to respond to treatment over the course of this infusion schedule, in lieu of any blood concentration measurements. We can incorporate the observed blood draws and obtain an individualized estimate of target attainment based on the patient's data.

<<>>=
# Posterior estimate after observed measurements
post_ft.mic <- mic_stat(ivt = ivt_d, dat = dat_d, th = 64)
post_ft.mic
@



\subsection{PK Model}
package functions: \texttt{pkm}

Fitting the model here
<<>>=
pk.fit <- pkm(formula = con ~ time, data = dat_d,
              ivt = ivt_d, thres = 64)
pk.fit$ftmic
@

The model MIC statistic is exactly that produced by the \texttt{mic_stat} function. Below we extract the predicted values, either directly from the model object (returns values calculated at infusion and blood draw times), or at user-specified times with the \texttt{predict.pkm} method.

<<>>=
pred.df <- pk.fit$fitted.values
# all.equal(pred.df$conc == predict(pk.fit)) # need to fix predict.pkm
@

<<echo = F, results = 'asis'>>=
names(pred.df) <- c("Time Since First Infusion (h)", "Concentration (mcg/mL)", "Standard Error")

xdf <- xtable(pred.df, digits = 2, caption = "Predicted Values")
align(xdf) <- rep('c', 4)
print(xdf, caption.placement = "top", include.rownames = FALSE)
@

\subsection{Model Methods}
package functions: \texttt{plot.pkm}, \texttt{predict.pkm}, \texttt{update.pkm}, \texttt{confint.pkm}


\begin{figure}
<<>>=
plot(pk.fit)
@
\end{figure}

\subsection{Shiny GUI}

An interactive implementation of the methods presented here can be launched within the package by calling \texttt{shiny_pkm}. This function procudes a web application, created using the {\it shiny} package in R. In the application, users can enter information about a patient's infusion schedule and and concentration data collected from blood draws. By default, the application uses the infusion schedule in the example above.

<<eval = F>>=
shiny_pkm()
@

% Insert screenshots of the application



\section{Discussion}

\begin{itemize}

  \item Recommendation about how to use this software: tinkering to get an idea of how patient is responding. After tinkering should do final round of MCMC sampling for most accurate estimates
  \item How it might be used in clinical settings
  \item Future directions
  \item How to modify the functions to adapt to other drugs
  \item extension to 3 compartment model or nonlinear kinetics (?)
  \item clincal complications - maybe get Bill's input on how to address the fact that we are dealing with AKI patients and piperacillin is partially renally excreted (caution of using this methodology)

\end{itemize}


% write some stuff here

\section{Appendix: Prior hyperparameters for piperacillin among critically ill}
\begin{center}
\begin{table}
\begin{tabular}{lll} \hline
Parameter & Value \\ \hline
log($\mu_0$) =& (lv_1=3.223, lk_10=-1.650, lk_12 = -7, lk_21 = -7)\\
$\Sigma_0 \sim$ & $300 \times$ \begin{bmatrix} 0.00167 & -0.00128 & 0 & 0\\
                                -0.00128 & 0.00154 &      0 &      0 \\
                                       0 &       0 & .00015 &      0 \\
                                       0 &       0 &      0 & .00015)\end{bmatrix}\\ % log?
\hline
\end{tabular}
\caption{Prior hyperparameters for piperacillin in a population of hospitalized, critically ill patients.}\label{tab:hyp}
\end{table}
\end{center}



\end{document}
